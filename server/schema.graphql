# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Authentication {
  token: String!
}

type ContentDetails {
  duration: Float!
  dimension: String!
  definition: String!
  caption: String!
}

input LoginInput {
  password: String!
  email: String
  username: String
}

type Mutation {
  createStation(data: StationCreateInput!): Station!
  deleteStation(where: StationFindOneWhereInput!): Boolean!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserFindOneWhereInput!): Boolean!
  deleteUser(where: UserFindOneWhereInput!): Boolean!
  login(data: LoginInput!): Authentication!
  register(data: RegisterInput!): Authentication!
  createSong(data: SongCreateInput!): Song!
  deleteSong(where: SongFindOneWhereInput!): Boolean!
}

enum MutationEnum {
  CREATED
  UPDATED
  DELETED
}

enum OrderEnum {
  ASC
  DESC
}

input PaginationInput {
  """Offset (paginated) where from entities should be taken. Default: 0"""
  skip: Int = 0

  """
  Limit (paginated) - max number of entities should be taken. Default: 10
  """
  take: Int = 10
}

type Query {
  stations(order: StationFindAllOrderInput, where: [StationFindAllWhereInput], pagination: PaginationInput): [Station!]!
  station(where: StationFindOneWhereInput!): Station!
  users(order: UserFindAllOrderInput, where: UserFindAllWhereInput, pagination: PaginationInput): [User!]!
  user(where: UserFindOneWhereInput!): User!
  currentUser: User!
  songs(order: SongFindAllOrderInput, where: [SongFindAllWhereInput], pagination: PaginationInput): [Song!]!
  song(where: SongFindOneWhereInput!): Song!
  youtubeVideo(where: YoutubeVideoFindOneInput!): YoutubeVideoDetail!
  youtubeVideos(where: YoutubeVideoFindAllInput!): [YoutubeVideo!]!
}

input RegisterInput {
  password: String!
  email: String
  username: String
}

type Snippet {
  publishedAt: String!
  channelId: String!
  title: String!
  description: String!
  thumbnails: Thumbnails!
  channelTitle: String!
}

type Song {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  startedAt: Timestamp
  title: String!
  url: String!
  thumbnail: String!
  duration: Int!
  status: SongStatusEnum!
  creator: User!
  station: Station!
  stationSlug: String!
  upVoteUserIds: [Int!]!
  downVoteUserIds: [Int!]!
}

input SongCreateInput {
  title: String!
  url: String!
  thumbnail: String!
  duration: Int!
  status: SongStatusEnum
  stationSlug: String!
}

enum SongExplorerOrderEnum {
  DATE
  RATING
  RELEVANCE
  TITLE
  VIEW_COUNT
  VIDEO_COUNT
}

input SongFindAllOrderInput {
  id: OrderEnum
  createdAt: OrderEnum
  updatedAt: OrderEnum
  title: OrderEnum
  url: OrderEnum
  thumbnail: OrderEnum
  duration: OrderEnum
}

input SongFindAllWhereInput {
  stationSlug: String
  title: String
  url: String
  thumbnail: String
  duration: Int
  status: SongStatusEnum
}

input SongFindOneWhereInput {
  id: Int!
}

enum SongStatusEnum {
  PENDING
  PLAYING
  PLAYED
  SKIPPED
}

type SongSubscription {
  mutation: MutationEnum!
  entity: SongSubscriptionEntity!
}

type SongSubscriptionEntity {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  startedAt: Timestamp
  title: String!
  url: String!
  thumbnail: String!
  duration: Int!
  status: SongStatusEnum!
  stationSlug: String!
  upVoteUserIds: [Int!]!
  downVoteUserIds: [Int!]!
}

input SongUpdateInput {
  title: String
  url: String
  thumbnail: String
  duration: Int
  status: SongStatusEnum
}

type Station {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  name: String!
  slug: String!
  description: String
  playingSong: Song
  userRoles: [UserRole!]!
  tags: [StationTag!]!
  onlineUsers: [User!]!
}

input StationCreateInput {
  name: String!
  slug: String!
  description: String
  tags: [StationTagCreateInput!]
}

input StationFindAllOrderInput {
  id: OrderEnum
  name: OrderEnum
  slug: OrderEnum
  createdAt: OrderEnum
  updatedAt: OrderEnum
}

input StationFindAllWhereInput {
  name: String
  slug: String
}

input StationFindOneWhereInput {
  id: Int
  name: String
  slug: String
}

type StationSubscription {
  mutation: MutationEnum!
  entity: StationSubscriptionEntity!
}

type StationSubscriptionEntity {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  name: String!
  slug: String!
  description: String
  playingSong: Song
}

type StationTag {
  id: Int!
  name: String!
  stations: [Station!]!
}

input StationTagCreateInput {
  name: String!
}

input StationUpdateInput {
  name: String
  slug: String
  description: String
}

type Subscription {
  station(where: StationFindOneWhereInput): StationSubscription!
  user(where: UserFindOneWhereInput): UserSubscription!
  song(where: SongFindAllWhereInput): SongSubscription!
}

type Thumbnail {
  url: String!
  width: Float!
  height: Float!
}

type Thumbnails {
  default: Thumbnail!
  medium: Thumbnail
  high: Thumbnail
  standard: Thumbnail
  maxres: Thumbnail
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type User {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  email: String!
  username: String!
  name: String
  country: String
  city: String
  bio: String
  avatarUrl: String
  coverUrl: String
  reputation: Int
  facebookId: String
  googleId: String
  roles: [UserRole!]!
}

input UserCreateInput {
  email: String!
  username: String!
  password: String!
  name: String
  country: String
  city: String
  bio: String
  avatarUrl: String
  coverUrl: String
  facebookId: String
  googleId: String
}

input UserFindAllOrderInput {
  id: OrderEnum
  username: OrderEnum
  email: OrderEnum
  createdAt: OrderEnum
  updatedAt: OrderEnum
  name: OrderEnum
  country: OrderEnum
  city: OrderEnum
  reputation: OrderEnum
}

input UserFindAllWhereInput {
  email: String
  username: String
}

input UserFindOneWhereInput {
  id: Int
  email: String
  username: String
}

type UserRole {
  id: Int!
  role: UserRoleEnum!
  user: User!
  station: Station
}

enum UserRoleEnum {
  ADMIN
  STATION_OWNER
  STATION_ADMIN
}

type UserSubscription {
  mutation: MutationEnum!
  entity: UserSubscriptionEntity!
}

type UserSubscriptionEntity {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  email: String!
  username: String!
  name: String
  country: String
  city: String
  bio: String
  avatarUrl: String
  coverUrl: String
  reputation: Int
  facebookId: String
  googleId: String
}

input UserUpdateInput {
  email: String
  username: String
  name: String
  country: String
  city: String
  bio: String
  avatarUrl: String
  coverUrl: String
  facebookId: String
  googleId: String
}

type YoutubeVideo {
  id: String!
  snippet: Snippet!
}

type YoutubeVideoDetail {
  id: String!
  snippet: Snippet!
  contentDetails: ContentDetails!
}

input YoutubeVideoFindAllInput {
  q: String!
  maxResults: Float
  order: SongExplorerOrderEnum
}

input YoutubeVideoFindOneInput {
  videoId: String
  url: String
}
