# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthenticationDTO {
  token: String!
}

type ContentDetails {
  duration: Float!
  dimension: String!
  definition: String!
  caption: String!
}

input LoginInput {
  password: String!
  email: String
  username: String
}

type Mutation {
  createStation(data: StationCreateInput): StationDTO!
  deleteStation(where: StationFindOneWhereInput): Boolean!
  createUser(data: UserCreateInput): UserDTO!
  updateUser(data: UserUpdateInput, where: UserFindOneWhereInput): Boolean!
  deleteUser(where: UserFindOneWhereInput): Boolean!
  login(data: LoginInput!): AuthenticationDTO!
  register(data: RegisterInput!): AuthenticationDTO!
}

enum MutationEnum {
  CREATED
  UPDATED
  DELETED
}

enum OrderEnum {
  ASC
  DESC
}

input PaginationInput {
  """Offset (paginated) where from entities should be taken. Default: 0"""
  skip: Int = 0

  """
  Limit (paginated) - max number of entities should be taken. Default: 10
  """
  take: Int = 10
}

type Query {
  stations(order: StationFindAllOrderInput, where: StationFindAllWhereInput, pagination: PaginationInput): [StationDTO!]!
  station(where: StationFindOneWhereInput): StationDTO!
  users(order: UserFindAllOrderInput, where: UserFindAllWhereInput, pagination: PaginationInput): [UserDTO!]!
  user(where: UserFindOneWhereInput): UserDTO!
  currentUser: UserDTO!
  youtubeVideo(where: YoutubeVideoFindOneInput!): YoutubeVideoDetailDTO!
  youtubeVideos(where: YoutubeVideoFindAllInput!): [YoutubeVideoDTO!]!
}

input RegisterInput {
  password: String!
  email: String
  username: String
}

type Snippet {
  publishedAt: String!
  channelId: String!
  title: String!
  description: String!
  thumbnails: Thumbnails!
  channelTitle: String!
}

enum SongExplorerOrderEnum {
  DATE
  RATING
  RELEVANCE
  TITLE
  VIEW_COUNT
  VIDEO_COUNT
}

input StationCreateInput {
  name: String!
  slug: String!
  description: String
  tags: [StationTagCreateInput!]
}

type StationDTO {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  name: String!
  slug: String!
  description: String
  userRoles: [UserRoleDTO!]!
  tags: [StationTagDTO!]!
  onlineUsers: [UserDTO!]!
}

input StationFindAllOrderInput {
  id: OrderEnum
  name: OrderEnum
  slug: OrderEnum
  createdAt: OrderEnum
  updatedAt: OrderEnum
}

input StationFindAllWhereInput {
  name: String
  slug: String
}

input StationFindOneWhereInput {
  id: Int
  name: String
  slug: String
}

input StationTagCreateInput {
  name: String!
}

type StationTagDTO {
  id: Int!
  name: String!
  stations: [StationDTO!]!
}

input StationUpdateInput {
  name: String
  slug: String
  description: String
}

type Subscription {
  user(where: UserFindOneWhereInput): UserSubscriptionDTO!
}

type Thumbnail {
  url: String!
  width: Float!
  height: Float!
}

type Thumbnails {
  default: Thumbnail!
  medium: Thumbnail
  high: Thumbnail
  standard: Thumbnail
  maxres: Thumbnail
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UserCreateInput {
  email: String!
  username: String!
  password: String!
  name: String
  country: String
  city: String
  bio: String
  avatarUrl: String
  coverUrl: String
  facebookId: String
  googleId: String
}

type UserDTO {
  id: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  email: String!
  username: String!
  name: String
  country: String
  city: String
  bio: String
  avatarUrl: String
  coverUrl: String
  reputation: Int
  facebookId: String
  googleId: String
  roles: [UserRoleDTO!]!
}

input UserFindAllOrderInput {
  id: OrderEnum
  username: OrderEnum
  email: OrderEnum
  createdAt: OrderEnum
  updatedAt: OrderEnum
  name: OrderEnum
  country: OrderEnum
  city: OrderEnum
  reputation: OrderEnum
}

input UserFindAllWhereInput {
  email: String
  username: String
}

input UserFindOneWhereInput {
  id: Int
  email: String
  username: String
}

type UserRoleDTO {
  id: Int!
  role: UserRoleEnum!
  user: UserDTO!
  station: StationDTO
}

enum UserRoleEnum {
  ADMIN
  STATION_OWNER
  STATION_ADMIN
}

type UserSubscriptionDTO {
  mutation: MutationEnum!

  """
  Return null when mutation is "DELETED"
  """
  entity: UserDTO

  """
  Return null when mutation is "CREATED or "UPDATED"
  """
  entityId: Int
}

input UserUpdateInput {
  email: String
  username: String
  name: String
  country: String
  city: String
  bio: String
  avatarUrl: String
  coverUrl: String
  facebookId: String
  googleId: String
}

type YoutubeVideoDetailDTO {
  id: String!
  snippet: Snippet!
  contentDetails: ContentDetails!
}

type YoutubeVideoDTO {
  id: String!
  snippet: Snippet!
}

input YoutubeVideoFindAllInput {
  q: String!
  maxResults: Float
  order: SongExplorerOrderEnum
}

input YoutubeVideoFindOneInput {
  videoId: String
  url: String
}
